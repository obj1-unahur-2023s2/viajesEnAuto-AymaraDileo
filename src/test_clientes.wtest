import clientes.*
import remisera.*

describe "Testing de AnaMaria " {
	

   test "esta economicamente estable" {

	   assert.that(anaMaria.estaEconomEstable())


  } 
  
   test "Precio del Km cuando esta economicamente estable"{
   	    
   	    assert.equals(30,anaMaria.precioDelKm())
   }

   test "no esta economicamente estable" {
	 
	    anaMaria.cambiarSituacionEconom()
	    assert.notThat(anaMaria.estaEconomEstable())
  }

   test "Precio del Km cuando no esta economicamente estable"{
   	
   	   anaMaria.cambiarSituacionEconom()
   	   assert.equals(25,anaMaria.precioDelKm())
   }
}

describe  "Testing de Teresa" {
	
	test "Precio del Km sin cambios"{
		
		assert.equals(22,teresa.precioDelKm())
	}
	
	test "Precio del Km con cambios"{
		
		teresa.precioDelKm(32)
		assert.equals(32,teresa.precioDelKm())
	}
	
}

describe "Testing de Roxana"{
	
	test "el viaje de ludmila con 10 kilometros es igual a 180"
	
	   assert.equals(180,roxana.cobrarPorKm(ludmila,10))
}

    test "el viaje de teresa con 30 kilometros y con precio 30 es igual a 900"{
   	
   	   teresa.precioDelKm(30)
   	   assert.equals(900,roxana.cobrarPorKm(teresa,30))
   }
   
}

describe "Testing de Gabriela"{
	
	 test "el viaje de ludmila con 10 kilometros es igual a 216"{
	 
	    assert.equals(216,gabriela.cobrarPorKm(ludmila,10))
    }
    
     test "el viaje de ana maria con 10 kilometros es igual a 300"{
     	
	    anaMaria.cambiarSituacionEconom()
	    assert.equals(300,gabriela.cobrarPorKm(anaMaria,10))
    }
    
    
    
}

describe "Testing de Mariela"{
	
	 test "el viaje de ludmila con 1 kilometro es igual a 50"{
	 	
	 	assert.equals(50, mariela.cobrarPorKm(ludmila,1))
	 }
	 
	 test "el viaje de ludmila con 15 kilometros es igual a 270"{
	 	
	 	assert.equals(270,mariela.cobrarPorKm(ludmila,15))
	 }
}

describe "Testing de Juana"{
	
	 test "el viaje de ludmila con 5 kilometros es igual 100"{
	 	
	 	assert.equals(100,juana.cobrarPorKm(ludmila,5))
	 }
	 
	 test "el viaje de ludmila con 15 km es igual a 200"{
	 	
	 	assert.equals(200,juana.cobrarPorKm(ludmila,15))
	 }
}

describe "Test de Lucia"{
	
	 test "No se puede reemplazar a si misma"{
	 	
	 	assert.throwsExceptionWithMessage(
	 	"no se puede reemplazar a si mismo",
	 		{lucia.estaReemplazando(lucia)}
	 	)
	 }
	 
	 	 test "se puede reemplazar a roxana"{
	 	
	 	assert.doesNotThrowException(
	 		{lucia.estaReemplazando(roxana)}
	 	)
	 	
	 }
	 
	  test "Reemplazo de roxana"{
	  	
	  	lucia.estaReemplazando(roxana)
	  	assert.equals(180,lucia.cobrarPorKm(ludmila,10))
	  }
}