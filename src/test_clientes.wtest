import clientes.*
import remisera.*
import oficina.*

describe "Testing de AnaMaria " {
	

   test "esta economicamente estable" {

	   assert.that(anaMaria.estaEconomEstable())


  } 
  
   test "Precio del Km cuando esta economicamente estable"{
   	    
   	    assert.equals(30,anaMaria.precioDelKm())
   }

   test "no esta economicamente estable" {
	 
	    anaMaria.cambiarSituacionEconom()
	    assert.notThat(anaMaria.estaEconomEstable())
  }

   test "Precio del Km cuando no esta economicamente estable"{
   	
   	   anaMaria.cambiarSituacionEconom()
   	   assert.equals(25,anaMaria.precioDelKm())
   }
}

describe  "Testing de Teresa" {
	
	test "Precio del Km sin cambios"{
		
		assert.equals(22,teresa.precioDelKm())
	}
	
	test "Precio del Km con cambios"{
		
		teresa.precioDelKm(32)
		assert.equals(32,teresa.precioDelKm())
	}
	
}

describe "Testing de Roxana"{
	
	test "el viaje de ludmila con 10 kilometros es igual a 180"
	
	   assert.equals(180,roxana.cobrarPorKm(ludmila,10))
}

    test "el viaje de teresa con 30 kilometros y con precio 30 es igual a 900"{
   	
   	   teresa.precioDelKm(30)
   	   assert.equals(900,roxana.cobrarPorKm(teresa,30))
   }
   
}

describe "Testing de Gabriela"{
	
	 test "el viaje de ludmila con 10 kilometros es igual a 216"{
	 
	    assert.equals(216,gabriela.cobrarPorKm(ludmila,10))
    }
    
     test "el viaje de ana maria con 10 kilometros es igual a 300"{
     	
	    anaMaria.cambiarSituacionEconom()
	    assert.equals(300,gabriela.cobrarPorKm(anaMaria,10))
    }
    
    
    
}

describe "Testing de Mariela"{
	
	 test "el viaje de ludmila con 1 kilometro es igual a 50"{
	 	
	 	assert.equals(50, mariela.cobrarPorKm(ludmila,1))
	 }
	 
	 test "el viaje de ludmila con 15 kilometros es igual a 270"{
	 	
	 	assert.equals(270,mariela.cobrarPorKm(ludmila,15))
	 }
}

describe "Testing de Juana"{
	
	 test "el viaje de ludmila con 5 kilometros es igual 100"{
	 	
	 	assert.equals(100,juana.cobrarPorKm(ludmila,5))
	 }
	 
	 test "el viaje de ludmila con 15 km es igual a 200"{
	 	
	 	assert.equals(200,juana.cobrarPorKm(ludmila,15))
	 }
}

describe "Test de Lucia"{
	
	 test "No se puede reemplazar a si misma"{
	 	
	 	assert.throwsExceptionWithMessage(
	 	"no se puede reemplazar a si mismo",
	 		{lucia.estaReemplazando(lucia)}
	 	)
	 }
	 
	 	 test "se puede reemplazar a roxana"{
	 	
	 	assert.doesNotThrowException(
	 		{lucia.estaReemplazando(roxana)}
	 	)
	 	
	 }
	 
	  test "Reemplazo de roxana"{
	  	
	  	lucia.estaReemplazando(roxana)
	  	assert.equals(180,lucia.cobrarPorKm(ludmila,10))
	  }
	  
	  test "puede reemplazar a Mariela llevando a Melina que trabaja para Ludmila haciendo 1 km"
	  
	    lucia.estaReemplazando(mariela)
	    melina.trabajaPara(ludmila)
	    assert.equals(50,lucia.cobrarPorKm(melina,1))
	     
}

describe "Test de Ludmila"{
	
	  test "el precio del l kilometro son 18 pesos"{
	  	assert.equals(18,ludmila.precioDelKm())
	  }
}

describe "Testing de Melina"{
	
	  test "Melina no puede trabajar para si misma"{
	  	
	  assert.throwsExceptionWithMessage(
	  	"No puede trabajar para si misma",
	  	 {melina.trabajaPara(melina)}
	  )
	  	
	  }
	  
	  test "Melina puede trabajar para otros"{
	  	
	  	assert.doesNotThrowException(
	  		{melina.trabajaPara(ludmila)}
	  	)
	  }
	
	  test "precio si trabaja para Melina"{
	  
	    melina.trabajaPara(ludmila)
	    assert.equals(15, melina.precioDelKm())
	  }
	  
	  test "precio si trabaja para Ana Maria"{
	  
	    melina.trabajaPara(anaMaria)
	    assert.equals(27, melina.precioDelKm())
	    anaMaria.cambiarSituacionEconom()
	    assert.equals(22,melina.precioDelKm())
	  }
	  
	  test "precio si trabaja para Teresa"{
	  
	    melina.trabajaPara(teresa)
	    assert.equals(19, melina.precioDelKm())
	    teresa.precioDelKm(32)
	    assert.equals(29, melina.precioDelKm())
	  }
	  
}

describe " Testing de oficina"{
	
	  test "Elije a juana como remisera llevando a ana maria en 10km"{
	  	
	  	oficina.asignarRemiseras(roxana,juana)
	  	assert.equals(juana,oficina.remiseraElegidaParaViaje(anaMaria, 10))
	  	
	  }
	  
	   test "Elije a roxana como remisera llevando a ana teresa en 10km"{
	  	
	  	oficina.asignarRemiseras(roxana,juana)
	  	assert.equals(roxana,oficina.remiseraElegidaParaViaje(teresa, 10))
	  	
	  }
	  
	  test "Elije a roxana como remisera llevando a ana teresa en 4km"{
	  	
	  	oficina.asignarRemiseras(roxana,juana)
	  	assert.equals(roxana,oficina.remiseraElegidaParaViaje(teresa, 4))
	  	
	  }
	  
	  test "No se puede elegir a la misma remisera"{
	  	
	  	oficina.asignarRemiseras(roxana,juana)
	  	assert.throwsExceptionWithMessage("Ya esta asignada la remisera", {
	  		oficina.cambiarPrimerRemiseraPor(roxana)}
	  	assert.throwsExceptionWithMessage("Ya esta asignada la remisera", {
	  		oficina.cambiarSegundaRemiseraPor(juana)}
	  }
	  
	  
	  test "Se puede elegir una remisera diferente en cada opcion"{
	  	oficina.asignarRemiseras(roxana,juana)
	  	assert.doesNotThrowException({oficina.cambiarPrimerRemiseraPor(gabriela)})
	  	assert.doesNotThrowException({oficina.cambiarPrimerRemiseraPor(lucia)})
	  }
	  
	  test "Invertir las opciones de las remiseras"{
	  	oficina.asignarRemiseras(roxana,juana)
	  	oficina.intercambiarRemiseras()
	  	assert.equals(juana, oficina.primeraRemisera())
	  	assert.equals(roxana, oficina.segundaRemisera())
	  
	  	
	  }
	  
}

